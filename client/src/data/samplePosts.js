export const samplePosts = [
  {
    id: "p1",
    title: "How to optimize React performance in 2025?",
    excerpt:
      "Discover the latest techniques for improving React app speed and user experience.",
    content:
      "React performance optimization is crucial for modern web applications. Here are some proven strategies: Use React.memo for expensive components, implement code splitting with React.lazy, optimize bundle size with tree shaking, leverage useMemo and useCallback for expensive calculations, implement virtual scrolling for large lists, and use proper key props for list items. Don't forget about lazy loading images and implementing service workers for caching.",
    author: {
      id: "u1",
      name: "Alice Johnson",
      avatar: "https://i.pravatar.cc/100?img=1",
      badge: "Gold",
      role: "Premium",
    },
    tags: ["react", "performance", "optimization", "frontend"],
    date: "2025-07-15T08:30:00Z",
    upvotes: 52,
    downvotes: 5,
    likes: 52,
    comments: 12,
    visibility: "public",
    category: "Frontend Development",
  },
  {
    id: "p2",
    title: "Node.js vs Python for Backend Development",
    excerpt:
      "A comprehensive comparison of Node.js and Python for server-side development.",
    content:
      "Both Node.js and Python are excellent choices for backend development, but they serve different purposes. Node.js excels in real-time applications, microservices, and when you want to use JavaScript across the full stack. Python shines in data science, machine learning, and complex backend logic. Consider your team's expertise, project requirements, and long-term maintenance when choosing.",
    author: {
      id: "u2",
      name: "Bob Smith",
      avatar: "https://i.pravatar.cc/100?img=2",
      badge: "Bronze",
      role: "General",
    },
    tags: ["nodejs", "python", "backend", "comparison"],
    date: "2025-07-14T14:22:00Z",
    upvotes: 38,
    downvotes: 6,
    likes: 38,
    comments: 8,
    visibility: "public",
    category: "Backend Development",
  },
  {
    id: "p3",
    title: "Complete Guide to TypeScript Generics",
    excerpt:
      "Master TypeScript generics with practical examples and real-world use cases.",
    content:
      "TypeScript generics provide a way to create reusable components that work with multiple types. They allow you to write flexible, type-safe code without sacrificing performance. This guide covers basic generic functions, generic interfaces, constraints, conditional types, and advanced patterns like mapped types and utility types.",
    author: {
      id: "u3",
      name: "Carol Davis",
      avatar: "https://i.pravatar.cc/100?img=3",
      badge: "Gold",
      role: "Premium",
    },
    tags: ["typescript", "generics", "javascript", "types"],
    date: "2025-07-13T10:15:00Z",
    upvotes: 71,
    downvotes: 6,
    likes: 71,
    comments: 15,
    visibility: "public",
    category: "Programming Languages",
  },
  {
    id: "p4",
    title: "Docker Best Practices for Microservices",
    excerpt:
      "Essential Docker practices for building scalable microservice architectures.",
    content:
      "Docker has revolutionized how we deploy and manage microservices. Key practices include: using multi-stage builds to reduce image size, implementing health checks, managing secrets securely, optimizing layer caching, using .dockerignore files, running containers as non-root users, and implementing proper logging strategies.",
    author: {
      id: "u4",
      name: "David Wilson",
      avatar: "https://i.pravatar.cc/100?img=4",
      badge: "Gold",
      role: "Premium",
    },
    tags: ["docker", "microservices", "devops", "containerization"],
    date: "2025-07-12T16:45:00Z",
    likes: 33,
    upvotes: 33,
    downvotes: 5,
    comments: 7,
    visibility: "public",
    category: "DevOps",
  },
  {
    id: "p5",
    title: "Building RESTful APIs with Express.js",
    excerpt:
      "Step-by-step guide to creating robust REST APIs using Express.js and best practices.",
    content:
      "Express.js is the most popular Node.js framework for building APIs. This guide covers setting up routes, middleware, error handling, authentication, input validation, API versioning, rate limiting, and documentation with OpenAPI. We'll also discuss testing strategies and deployment considerations.",
    author: {
      id: "u5",
      name: "Emma Brown",
      avatar: "https://i.pravatar.cc/100?img=5",
      badge: "Bronze",
      role: "General",
    },
    tags: ["express", "nodejs", "api", "rest"],
    date: "2025-07-11T09:30:00Z",
    upvotes: 46,
    downvotes: 5,
    likes: 46,
    comments: 11,
    visibility: "public",
    category: "Backend Development",
  },
  {
    id: "p6",
    title: "CSS Grid vs Flexbox: When to Use What?",
    excerpt:
      "Understanding the differences between CSS Grid and Flexbox for layout design.",
    content:
      "CSS Grid and Flexbox are both powerful layout tools, but they serve different purposes. Use Flexbox for one-dimensional layouts (rows or columns) and component alignment. Use CSS Grid for two-dimensional layouts and complex page structures. Often, they work best together in the same project.",
    author: {
      id: "u6",
      name: "Frank Miller",
      avatar: "https://i.pravatar.cc/100?img=6",
      badge: "Bronze",
      role: "General",
    },
    tags: ["css", "grid", "flexbox", "layout"],
    date: "2025-07-10T13:20:00Z",
    upvotes: 24,
    downvotes: 5,
    likes: 24,
    comments: 6,
    visibility: "public",
    category: "Frontend Development",
  },
  {
    id: "p7",
    title: "MongoDB Aggregation Pipeline Explained",
    excerpt:
      "Master MongoDB's aggregation framework for complex data processing and analytics.",
    content:
      "MongoDB's aggregation pipeline is a powerful tool for data processing. It allows you to transform, filter, group, and analyze data efficiently. This guide covers stages like $match, $group, $project, $sort, $lookup for joins, and performance optimization techniques.",
    author: {
      id: "u7",
      name: "Grace Lee",
      avatar: "https://i.pravatar.cc/100?img=7",
      badge: "Gold",
      role: "Premium",
    },
    tags: ["mongodb", "database", "aggregation", "nosql"],
    date: "2025-07-09T11:10:00Z",
    upvotes: 43,
    downvotes: 5,
    likes: 43,
    comments: 9,
    visibility: "public",
    category: "Database",
  },
  {
    id: "p8",
    title: "GraphQL vs REST: Choosing the Right API",
    excerpt:
      "Compare GraphQL and REST APIs to make informed decisions for your projects.",
    content:
      "GraphQL and REST are both valid API approaches with different strengths. GraphQL offers flexibility, strong typing, and efficient data fetching. REST is simpler, has better caching, and is more familiar to most developers. Choose based on your team's expertise, client needs, and project complexity.",
    author: {
      id: "u8",
      name: "Henry Taylor",
      avatar: "https://i.pravatar.cc/100?img=8",
      badge: "Bronze",
      role: "General",
    },
    tags: ["graphql", "rest", "api", "backend"],
    date: "2025-07-08T15:40:00Z",
    upvotes: 29,
    downvotes: 4,
    likes: 29,
    comments: 8,
    visibility: "public",
    category: "Backend Development",
  },
  {
    id: "p9",
    title: "Implementing Authentication with JWT",
    excerpt:
      "Complete guide to implementing secure authentication using JSON Web Tokens.",
    content:
      "JWT authentication is widely used for securing modern web applications. This guide covers token structure, signing and verification, refresh token strategies, security best practices, handling token expiration, and implementing logout functionality. We'll also discuss common vulnerabilities and how to avoid them.",
    author: {
      id: "u9",
      name: "Ivy Chen",
      avatar: "https://i.pravatar.cc/100?img=9",
      badge: "Gold",
      role: "Premium",
    },
    tags: ["jwt", "authentication", "security", "nodejs"],
    date: "2025-07-07T12:25:00Z",
    upvotes: 62,
    downvotes: 6,
    likes: 62,
    comments: 14,
    visibility: "public",
    category: "Security",
  },
  {
    id: "p10",
    title: "React Hooks: Beyond useState and useEffect",
    excerpt:
      "Explore advanced React hooks like useReducer, useContext, and custom hooks.",
    content:
      "While useState and useEffect are fundamental, React offers many more hooks for complex state management and side effects. Learn about useReducer for complex state logic, useContext for prop drilling, useMemo and useCallback for performance, and how to create custom hooks for reusable logic.",
    author: {
      id: "u10",
      name: "Jack Anderson",
      avatar: "https://i.pravatar.cc/100?img=10",
      badge: "Bronze",
      role: "General",
    },
    tags: ["react", "hooks", "state", "frontend"],
    date: "2025-07-06T10:50:00Z",
    upvotes: 37,
    downvotes: 4,
    likes: 37,
    comments: 10,
    visibility: "public",
    category: "Frontend Development",
  },
];
